const std = @import("std");
const core = @import("../../main.zig");
const fg = core.fg;
const builtin = @import("builtin");
const pipe = @import("../../shell/pipe.zig");
const shell = @import("../../shell.zig");

pub const exec_mode: core.ExecMode = .function;

pub const help = core.Help{
    .description = "runs a program, then executes code within `{}` if exited successfully",
    .usage = "<PROGRAM> { ... }",
};

pub fn main(arguments: []const core.Argument) core.Error {
    //const stdout = std.io.getStdOut().writer();

    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    const allocator = gpa.allocator();

    if (arguments.len < 1) return .usage_error;
    //if (arguments[0] == .option) return .usage_error;

    var sys_args: ?[][]const u8 = null;

    var negate = false;

    //var args = if (arguments.len > 1) arguments[1..] else &[_]core.Argument{};
    var args = if (arguments.len > 1) arguments[2..] else &[_]core.Argument{};

    var target: ?[]const u8 = null;

    //for (args, 0..) |arg, idx| {
    for (arguments, 0..) |arg, idx| {
        if (arg == .option) switch (arg.option[1]) {
            'n' => negate = true,

            else => return .usage_error,
        };

        if (arg == .positional) {
            if (target == null) target = arg.positional;

            if (std.mem.eql(u8, arg.positional, ":")) {
                args = args[0..idx];
                break;
            }
        }
    }

    const command_name = target orelse return .usage_error;
    var command = shell.Command{ .system = .{
        .name = command_name,
    } };

    // Convert to module command if it exists
    if (core.module_list.get(command_name)) |_| {
        command = .{ .module = .{
            .name = command.system.name,
            .arguments = args,
        } };
    } else {
        sys_args = allocator.alloc(
            []const u8,
            args.len,
        ) catch unreachable;

        for (args, 0..) |_, idx| {
            switch (args[idx]) {
                .option => |opt| {
                    sys_args.?[idx] = std.fmt.allocPrint(
                        allocator,
                        "-{c}",
                        .{opt[1]},
                    ) catch return .out_of_memory;
                },
                .positional => |str| {
                    sys_args.?[idx] = str;
                },
            }
        }

        command.system.arguments = sys_args.?;
    }

    const exit_status = pipe.chainCommands(
        allocator,
        &.{command},
    ) catch unreachable;
    _ = &exit_status;

    if (negate) {
        std.debug.print("{}\n", .{exit_status});
        if (exit_status.ret == .success) return .success;
    } else {
        std.debug.print("{}\n", .{exit_status});
        if (exit_status.ret != .success) return .success;
    }

    if (sys_args != null) {
        for (args, 0..) |arg, idx| {
            if (arg == .option) {
                allocator.free(sys_args.?[idx]);
            }
        }

        allocator.free(sys_args.?);
    }

    if (arguments[args.len..].len <= 2) return .usage_error;

    const run_command_name = arguments[args.len..][2].positional;

    var run_command = shell.Command{ .system = .{
        .name = run_command_name,
    } };

    // Convert to module command if it exists
    if (core.module_list.get(run_command_name)) |_| {
        run_command = .{
            .module = .{
                .name = run_command.system.name,
                .arguments = arguments[args.len..][3..],
            },
        };
    } else {}

    const run_exit_status = pipe.chainCommands(
        allocator,
        &.{run_command},
    ) catch unreachable;

    return switch (run_exit_status.ret) {
        .success => .success,

        else => .unknown_error,
    };
}
